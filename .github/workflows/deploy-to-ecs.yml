name: Deploy to Docker Hub

on:
  push:
    branches:
      - backend
  workflow_dispatch:
    inputs:
      environment:
        description: 'environment to publish: dev or prod'
        required: true
        default: 'prod'
      ref:
        description: 'The branch, tag or SHA to checkout.'
        required: true
        default: 'backend'
jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    env:
      DOCKER_REPOSITORY: api
      ECS_CLUSTER_NAME: PublicCluster
      ECS_PROD_SERVICE_NAME: private
      ECS_DEV_SERVICE_NAME: private-dev
      ECS_PROD_CONTAINER_NAME: api
      ECS_DEV_CONTAINER_NAME: api
      AWS_REGION: ap-northeast-2
      SERVICE_TAG: ./deployments/app/Dockerfile

    steps:
    - name: Setup Variables
      run: |
        if [ "${{ github.event_name }}" = 'workflow_dispatch' ]; then
          if [ "${{ github.event.inputs.environment }}" = 'dev' ]; then
          # 수동 dev 배포시 dev 모드로 배포
            echo "ECS_CONTAINER_NAME=${ECS_DEV_CONTAINER_NAME}" >> $GITHUB_ENV
            echo "ECS_SERVICE_NAME=${ECS_DEV_SERVICE_NAME}" >> $GITHUB_ENV
            echo "ECS_TASK_DEFINITION_NAME=./deployments/aws/ecs/task-definition-dev.json" >> $GITHUB_ENV
          else
          # 수동 prod 배포시 prod 모드로 배포
            echo "APPLICATION_NAME=private" >> $GITHUB_ENV
            echo "DEPLOYMENT_GROUP_NAME=api" >> $GITHUB_ENV
            echo "ECS_CONTAINER_NAME=${ECS_PROD_CONTAINER_NAME}" >> $GITHUB_ENV
            echo "ECS_SERVICE_NAME=${ECS_PROD_SERVICE_NAME}" >> $GITHUB_ENV
            echo "ECS_TASK_DEFINITION_NAME=./deployments/aws/ecs/task-definition-prod.json" >> $GITHUB_ENV
          fi
        else
        # backend branch push가 트리거된 경우, prod 모드로 배포
          echo "ECS_CONTAINER_NAME=${ECS_PROD_CONTAINER_NAME}" >> $GITHUB_ENV
          echo "ECS_SERVICE_NAME=${ECS_PROD_SERVICE_NAME}" >> $GITHUB_ENV
          echo "ECS_TASK_DEFINITION_NAME=./deployments/aws/ecs/task-definition-prod.json" >> $GITHUB_ENV
        fi

        # 공통으로 사용되는 환경변수 설정
        echo "ECS_CLUSTER_NAME=${ECS_CLUSTER_NAME}" >> $GITHUB_ENV
        echo "AWS_REGION=${AWS_REGION}" >> $GITHUB_ENV
        echo "ECR_REPOSITORY=${ECR_REPOSITORY}" >> $GITHUB_ENV

    - name: Checkout
      uses: actions/checkout@v2
      with:
        ref: ${{ github.event.inputs.ref }}

    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

    - name: Build, tag, and push App image to Docker Hub
      run: |
        docker build -f $SERVICE_TAG -t ${{ secrets.DOCKER_HUB_USERNAME }}/${DOCKER_REPOSITORY}:latest .
        docker push ${{ secrets.DOCKER_HUB_USERNAME }}/${DOCKER_REPOSITORY}:latest
